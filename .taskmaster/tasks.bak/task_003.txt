# Task ID: 3
# Title: Refactor Frontend to Remove External API Dependencies
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Refactor the transcript-seeker frontend to remove all external API dependencies (Gladia, AssemblyAI, etc.) and integrate with the local FastAPI backend.
# Details:
1. Identify and remove external API dependencies:
   - Locate all instances of external API calls in the codebase
   - Remove imports and configurations related to external APIs
   - Delete any unused components or utilities specific to external APIs

2. Create a local API integration module:
   - Develop a new module (e.g., `localApiService.ts`) to handle communication with the FastAPI backend
   - Implement functions for audio upload, transcription requests, and retrieving results
   - Ensure proper error handling and loading states

3. Update state management:
   - Modify Redux actions and reducers (or equivalent state management) to work with the local API
   - Update any middleware or async logic to use the new local API integration module

4. Refactor editable todo item interface:
   - Implement a new component for editable todo items
   - Add functionality for creating, editing, and deleting todo items
   - Ensure changes are persisted through the local API

5. Enhance audio-text timestamp synchronization:
   - Update the audio player component to work with locally generated timestamps
   - Implement precise synchronization between audio playback and text highlighting
   - Add functionality to jump to specific timestamps in both audio and text

6. Update UI components:
   - Modify existing components to reflect the new local backend integration
   - Update loading indicators and error messages to match the local API responses
   - Ensure all UI elements are responsive and accessible

7. Implement offline capabilities:
   - Add service workers for offline caching of assets and API responses
   - Implement queue system for operations performed while offline

8. Security considerations:
   - Implement proper CORS settings for communication with the local API
   - Ensure any sensitive data is properly handled and not exposed in the frontend

9. Performance optimization:
   - Implement lazy loading for large transcripts
   - Optimize rendering of long lists of timestamps and text

10. Documentation:
    - Update all relevant documentation to reflect the changes in the frontend architecture
    - Provide clear instructions for setting up and running the frontend with the local backend

# Test Strategy:
1. Unit Testing:
   - Write unit tests for the new localApiService module
   - Test all CRUD operations for todo items
   - Verify correct handling of API responses and errors

2. Integration Testing:
   - Test the integration between the frontend and the local FastAPI backend
   - Verify successful audio upload, transcription, and retrieval of results
   - Ensure proper synchronization between audio playback and text highlighting

3. UI Testing:
   - Use tools like React Testing Library to test UI components
   - Verify that all UI elements respond correctly to user interactions
   - Test accessibility features and keyboard navigation

4. End-to-End Testing:
   - Implement Cypress or similar E2E testing framework
   - Create test scenarios that cover the entire user flow, from upload to transcription to editing
   - Test offline capabilities by simulating network disconnections

5. Performance Testing:
   - Use browser developer tools to measure and optimize load times and rendering performance
   - Test with large transcripts to ensure smooth scrolling and efficient memory usage

6. Cross-browser Testing:
   - Verify functionality and appearance across different browsers (Chrome, Firefox, Safari, Edge)
   - Test on different devices and screen sizes to ensure responsive design

7. Security Testing:
   - Perform penetration testing to identify any security vulnerabilities
   - Verify that all communication with the backend is properly secured

8. Usability Testing:
   - Conduct user testing sessions to gather feedback on the new interface and functionality
   - Iterate on the design based on user feedback

9. Regression Testing:
   - Ensure that all existing features not directly related to API integration continue to function correctly
   - Verify that the overall user experience has not been negatively impacted by the changes

10. Documentation Review:
    - Review and validate all updated documentation for accuracy and completeness
    - Ensure that setup and running instructions are clear and can be followed by new developers

# Subtasks:
## 1. 外部API依赖剥离 [pending]
### Dependencies: None
### Description: 识别并移除transcript-seeker中所有外部API调用和相关依赖
### Details:
- 全局搜索识别Gladia、AssemblyAI、OpenAI等外部API调用
- 移除外部服务相关的配置文件和环境变量
- 清理相关的npm依赖包
- 保留核心UI组件和交互逻辑
- 创建本地API接口的占位符

## 2. 本地API服务集成 [pending]
### Dependencies: None
### Description: 创建localApiService.ts连接本地FastAPI后端，实现完整的API调用逻辑
### Details:
- 创建src/services/localApiService.ts模块
- 实现文件上传和会议处理API调用
- 集成JWT令牌认证机制
- 适配新的数据格式和响应结构
- 实现错误处理和重试机制

## 3. 可编辑待办事项界面重构 [pending]
### Dependencies: None
### Description: 基于后端数据重新设计待办事项组件，实现实时编辑和保存功能
### Details:
- 重新设计待办事项列表组件
- 实现行内编辑功能和输入验证
- 集成实时保存和自动保存机制
- 添加时间戳点击跳转功能
- 实现待办事项的增删改操作

## 4. 音频-文字时间戳同步功能强化 [pending]
### Dependencies: None
### Description: 利用词级时间戳重构转录文本渲染，实现精确的点击跳转音频播放功能
### Details:
- 重构转录文本组件支持词级时间戳渲染
- 实现每个词的可点击<span>元素
- 优化音频播放器控制逻辑
- 实现精确的时间戳同步跳转
- 测试和优化同步精度和用户体验

